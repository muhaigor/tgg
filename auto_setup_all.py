#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
"""

import requests
import json
import os
import time
from datetime import datetime

class AllServicesSetup:
    def __init__(self, repl_url):
        self.repl_url = repl_url
        self.results = {}
        
    def test_bot_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–æ—Ç–∞...")
        
        endpoints = {
            'home': f"{self.repl_url}/",
            'ping': f"{self.repl_url}/ping", 
            'health': f"{self.repl_url}/health",
            'stats': f"{self.repl_url}/stats"
        }
        
        results = {}
        for name, url in endpoints.items():
            try:
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    print(f"‚úÖ {name}: {url} - OK")
                    results[name] = True
                else:
                    print(f"‚ö†Ô∏è {name}: {url} - {response.status_code}")
                    results[name] = False
            except Exception as e:
                print(f"‚ùå {name}: {url} - Error: {e}")
                results[name] = False
                
        return results
        
    def setup_uptimerobot_api(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UptimeRobot —á–µ—Ä–µ–∑ API"""
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UptimeRobot —á–µ—Ä–µ–∑ API...")
        
        api_key = os.environ.get('UPTIMEROBOT_API_KEY', '')
        if not api_key:
            print("‚ö†Ô∏è API –∫–ª—é—á UptimeRobot –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ UPTIMEROBOT_API_KEY –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é")
            return False
            
        url = "https://api.uptimerobot.com/v2/newMonitor"
        data = {
            'api_key': api_key,
            'format': 'json',
            'type': '1',
            'url': f"{self.repl_url}/ping",
            'friendly_name': 'German Words Bot',
            'interval': '300',
            'timeout': '30'
        }
        
        try:
            response = requests.post(url, data=data)
            result = response.json()
            
            if result['stat'] == 'ok':
                print(f"‚úÖ UptimeRobot –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω! ID: {result['monitor']['id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ UptimeRobot: {result['error']['message']}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API UptimeRobot: {e}")
            return False
            
    def create_webhook_monitor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        webhook_content = f'''#!/usr/bin/env python3
"""
–í–µ–±-—Ö—É–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
"""

import requests
import time
import json
from datetime import datetime

def ping_bot():
    url = "{self.repl_url}/ping"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ Bot ping successful at {{datetime.now()}}")
            return True
        else:
            print(f"‚ö†Ô∏è Bot ping failed: {{response.status_code}}")
            return False
    except Exception as e:
        print(f"‚ùå Bot ping error: {{e}}")
        return False

if __name__ == "__main__":
    ping_bot()
'''
        
        with open('webhook_monitor.py', 'w', encoding='utf-8') as f:
            f.write(webhook_content)
            
        print("‚úÖ –í–µ–±-—Ö—É–∫ —Å–æ–∑–¥–∞–Ω: webhook_monitor.py")
        return True
        
    def create_cron_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è cron"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è cron...")
        
        cron_script = f'''#!/bin/bash
# Cron —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
# –î–æ–±–∞–≤—å—Ç–µ –≤ crontab: */5 * * * * /path/to/cron_monitor.sh

URL="{self.repl_url}/ping"
LOG_FILE="cron_monitor.log"

echo "$(date): Pinging bot..." >> $LOG_FILE
curl -s -o /dev/null -w "%{{http_code}}" $URL >> $LOG_FILE
echo "" >> $LOG_FILE
'''
        
        with open('cron_monitor.sh', 'w') as f:
            f.write(cron_script)
            
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod('cron_monitor.sh', 0o755)
        
        print("‚úÖ Cron —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: cron_monitor.sh")
        return True
        
    def create_powershell_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Windows"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞...")
        
        ps_script = f'''# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\\monitor_bot.ps1

$url = "{self.repl_url}/ping"
$logFile = "monitor_bot.log"

while ($true) {{
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    try {{
        $response = Invoke-WebRequest -Uri $url -TimeoutSec 5
        if ($response.StatusCode -eq 200) {{
            Write-Host "‚úÖ Bot ping successful at $timestamp"
            Add-Content -Path $logFile -Value "$timestamp: SUCCESS"
        }} else {{
            Write-Host "‚ö†Ô∏è Bot ping failed: $($response.StatusCode)"
            Add-Content -Path $logFile -Value "$timestamp: FAILED - $($response.StatusCode)"
        }}
    }} catch {{
        Write-Host "‚ùå Bot ping error: $_"
        Add-Content -Path $logFile -Value "$timestamp: ERROR - $_"
    }}
    
    Start-Sleep -Seconds 300  # 5 –º–∏–Ω—É—Ç
}}
'''
        
        with open('monitor_bot.ps1', 'w', encoding='utf-8') as f:
            f.write(ps_script)
            
        print("‚úÖ PowerShell —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: monitor_bot.ps1")
        return True
        
    def create_docker_monitor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ Docker –º–æ–Ω–∏—Ç–æ—Ä–∞...")
        
        dockerfile = '''FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY monitor.py .

CMD ["python", "monitor.py"]
'''
        
        monitor_py = f'''#!/usr/bin/env python3
"""
Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞
"""

import requests
import time
import json
from datetime import datetime

def monitor_bot():
    url = "{self.repl_url}/ping"
    
    while True:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Bot ping successful at {{datetime.now()}}")
            else:
                print(f"‚ö†Ô∏è Bot ping failed: {{response.status_code}}")
        except Exception as e:
            print(f"‚ùå Bot ping error: {{e}}")
        
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

if __name__ == "__main__":
    print("üöÄ Starting bot monitor...")
    monitor_bot()
'''
        
        with open('Dockerfile.monitor', 'w') as f:
            f.write(dockerfile)
            
        with open('monitor.py', 'w', encoding='utf-8') as f:
            f.write(monitor_py)
            
        print("‚úÖ Docker –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: Dockerfile.monitor, monitor.py")
        return True
        
    def generate_setup_instructions(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...")
        
        instructions = f"""
# üöÄ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê

## üåê URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: {self.repl_url}

## üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:

### 1. Python –º–æ–Ω–∏—Ç–æ—Ä
```bash
python webhook_monitor.py
```

### 2. Cron –º–æ–Ω–∏—Ç–æ—Ä (Linux/Mac)
```bash
chmod +x cron_monitor.sh
# –î–æ–±–∞–≤—å—Ç–µ –≤ crontab: */5 * * * * /path/to/cron_monitor.sh
```

### 3. PowerShell –º–æ–Ω–∏—Ç–æ—Ä (Windows)
```powershell
.\\monitor_bot.ps1
```

### 4. Docker –º–æ–Ω–∏—Ç–æ—Ä
```bash
docker build -f Dockerfile.monitor -t bot-monitor .
docker run -d --name bot-monitor bot-monitor
```

## üåê –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é):

### UptimeRobot
1. https://uptimerobot.com
2. URL: {self.repl_url}/ping
3. Interval: 5 minutes

### StatusCake  
1. https://statuscake.com
2. URL: {self.repl_url}/health
3. Interval: 5 minutes

### Cron-job.org
1. https://cron-job.org
2. URL: {self.repl_url}/ping
3. Schedule: */5 * * * *

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.repl_url}/stats
- Health check: {self.repl_url}/health
- Ping: {self.repl_url}/ping

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:
–í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∑–∞—â–∏—â–µ–Ω –æ—Ç —Å–Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞–º–∏!
"""
        
        with open('SETUP_INSTRUCTIONS.md', 'w', encoding='utf-8') as f:
            f.write(instructions)
            
        print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: SETUP_INSTRUCTIONS.md")
        return True
        
    def run_full_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("üöÄ –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 60)
        print(f"üåê URL –±–æ—Ç–∞: {self.repl_url}")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
        endpoint_results = self.test_bot_endpoints()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UptimeRobot
        uptimerobot_result = self.setup_uptimerobot_api()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        webhook_result = self.create_webhook_monitor()
        cron_result = self.create_cron_script()
        ps_result = self.create_powershell_script()
        docker_result = self.create_docker_monitor()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions_result = self.generate_setup_instructions()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results = {
            'endpoints': endpoint_results,
            'uptimerobot': uptimerobot_result,
            'webhook': webhook_result,
            'cron': cron_result,
            'powershell': ps_result,
            'docker': docker_result,
            'instructions': instructions_result
        }
        
        print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for service, result in self.results.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"{status} {service.upper()}")
        
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ SETUP_INSTRUCTIONS.md")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("4. –í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω! üõ°Ô∏è")

def main():
    # –ü–æ–ª—É—á–∞–µ–º URL
    repl_url = os.environ.get('REPLIT_URL', '')
    if not repl_url:
        print("üåê –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Replit –ø—Ä–æ–µ–∫—Ç–∞:")
        print("–ü—Ä–∏–º–µ—Ä: https://your-project-name.repl.co")
        repl_url = input("URL: ").strip()
        
        if not repl_url.startswith('http'):
            repl_url = f"https://{repl_url}"
        if not repl_url.endswith('.repl.co'):
            repl_url = f"{repl_url}.repl.co"
    
    setup = AllServicesSetup(repl_url)
    setup.run_full_setup()

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ UptimeRobot —á–µ—Ä–µ–∑ API
"""

import requests
import json
import os

class UptimeRobotSetup:
    def __init__(self, api_key, repl_url):
        self.api_key = api_key
        self.repl_url = repl_url
        self.base_url = "https://api.uptimerobot.com/v2"
        
    def create_monitor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤ UptimeRobot"""
        url = f"{self.base_url}/newMonitor"
        
        data = {
            'api_key': self.api_key,
            'format': 'json',
            'type': '1',  # HTTP(s)
            'url': f"{self.repl_url}/ping",
            'friendly_name': 'German Words Bot',
            'interval': '300',  # 5 minutes
            'timeout': '30',
            'keyword_type': '0',
            'keyword_value': '',
            'http_username': '',
            'http_password': '',
            'port': '',
            'ignore_ssl_errors': '0',
            'alert_contacts': '',
            'mwindows': '',
            'custom_http_headers': '',
            'http_method': 'GET'
        }
        
        try:
            response = requests.post(url, data=data)
            result = response.json()
            
            if result['stat'] == 'ok':
                print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: {result['monitor']['id']}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞: {result['error']['message']}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return False
            
    def get_monitors(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        url = f"{self.base_url}/getMonitors"
        
        data = {
            'api_key': self.api_key,
            'format': 'json',
            'logs': '0',
            'response_times': '0',
            'response_times_average': '0',
            'response_times_start_date': '',
            'response_times_end_date': '',
            'alert_contacts': '0',
            'mwindows': '0',
            'timezone': '0',
            'custom_uptime_ratios': '',
            'custom_uptime_ranges': ''
        }
        
        try:
            response = requests.post(url, data=data)
            result = response.json()
            
            if result['stat'] == 'ok':
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {result['pagination']['total']}")
                for monitor in result['monitors']:
                    print(f"  - {monitor['friendly_name']}: {monitor['url']} (ID: {monitor['id']})")
                return result['monitors']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {result['error']['message']}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            return []

def main():
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê UPTIMEROBOT")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.environ.get('UPTIMEROBOT_API_KEY', '')
    if not api_key:
        print("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á UptimeRobot:")
        print("–ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞: https://uptimerobot.com/dashboard.php#mySettings")
        api_key = input("API Key: ").strip()
    
    # –ü–æ–ª—É—á–∞–µ–º URL
    repl_url = os.environ.get('REPLIT_URL', '')
    if not repl_url:
        print("üåê –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Replit –ø—Ä–æ–µ–∫—Ç–∞:")
        repl_url = input("URL: ").strip()
        if not repl_url.startswith('http'):
            repl_url = f"https://{repl_url}"
        if not repl_url.endswith('.repl.co'):
            repl_url = f"{repl_url}.repl.co"
    
    setup = UptimeRobotSetup(api_key, repl_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–Ω–∏—Ç–æ—Ä—ã...")
    monitors = setup.get_monitors()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ URL
    existing_monitor = None
    for monitor in monitors:
        if monitor['url'] == f"{repl_url}/ping":
            existing_monitor = monitor
            break
    
    if existing_monitor:
        print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_monitor['friendly_name']} (ID: {existing_monitor['id']})")
    else:
        print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä...")
        if setup.create_monitor():
            print("üéâ –ú–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä")
    
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ UptimeRobot: https://uptimerobot.com/dashboard.php")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()

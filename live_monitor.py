#!/usr/bin/env python3
"""
–ñ–∏–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è Replit –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
"""

import requests
import time
import json
import threading
from datetime import datetime
import os

class LiveMonitor:
    def __init__(self, repl_url):
        self.repl_url = repl_url
        self.stats = {
            'total_pings': 0,
            'successful_pings': 0,
            'failed_pings': 0,
            'start_time': datetime.now(),
            'last_success': None,
            'last_failure': None
        }
        self.running = True
        
    def ping_bot(self):
        """–ü–∏–Ω–≥ –±–æ—Ç–∞"""
        try:
            response = requests.get(f"{self.repl_url}/ping", timeout=5)
            self.stats['total_pings'] += 1
            
            if response.status_code == 200:
                self.stats['successful_pings'] += 1
                self.stats['last_success'] = datetime.now()
                return True, "OK"
            else:
                self.stats['failed_pings'] += 1
                self.stats['last_failure'] = datetime.now()
                return False, f"HTTP {response.status_code}"
                
        except Exception as e:
            self.stats['total_pings'] += 1
            self.stats['failed_pings'] += 1
            self.stats['last_failure'] = datetime.now()
            return False, str(e)
    
    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            response = requests.get(f"{self.repl_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                return True, data
            else:
                return False, f"HTTP {response.status_code}"
        except Exception as e:
            return False, str(e)
    
    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        try:
            response = requests.get(f"{self.repl_url}/stats", timeout=5)
            if response.status_code == 200:
                return True, response.text
            else:
                return False, f"HTTP {response.status_code}"
        except Exception as e:
            return False, str(e)
    
    def display_stats(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = datetime.now() - self.stats['start_time']
        success_rate = (self.stats['successful_pings'] / self.stats['total_pings'] * 100) if self.stats['total_pings'] > 0 else 0
        
        print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
        print(f"üì° –í—Å–µ–≥–æ –ø–∏–Ω–≥–æ–≤: {self.stats['total_pings']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.stats['successful_pings']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.stats['failed_pings']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if self.stats['last_success']:
            print(f"üü¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {self.stats['last_success'].strftime('%H:%M:%S')}")
        if self.stats['last_failure']:
            print(f"üî¥ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.stats['last_failure'].strftime('%H:%M:%S')}")
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {self.repl_url}")
        print("=" * 60)
        
        while self.running:
            timestamp = datetime.now().strftime('%H:%M:%S')
            
            # –ü–∏–Ω–≥ –±–æ—Ç–∞
            success, message = self.ping_bot()
            status_icon = "‚úÖ" if success else "‚ùå"
            print(f"{status_icon} [{timestamp}] Ping: {message}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥—ã–µ 5 –ø–∏–Ω–≥–æ–≤
            if self.stats['total_pings'] % 5 == 0:
                health_success, health_data = self.check_health()
                if health_success:
                    print(f"üè• [{timestamp}] Health: OK - {health_data.get('active_chats', 0)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
                else:
                    print(f"üè• [{timestamp}] Health: {health_data}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø–∏–Ω–≥–æ–≤
            if self.stats['total_pings'] % 10 == 0:
                self.display_stats()
            
            time.sleep(30)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            self.monitor_loop()
        except KeyboardInterrupt:
            print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            self.running = False
            self.display_stats()
            print("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    print("üöÄ –ñ–ò–í–û–ô –ú–û–ù–ò–¢–û–† –î–õ–Ø REPLIT –ë–û–¢–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º URL
    repl_url = input("üåê –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Replit –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    
    if not repl_url.startswith('http'):
        repl_url = f"https://{repl_url}"
    if not repl_url.endswith('.repl.co'):
        repl_url = f"{repl_url}.repl.co"
    
    print(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {repl_url}")
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = LiveMonitor(repl_url)
    monitor.start()

if __name__ == "__main__":
    main()

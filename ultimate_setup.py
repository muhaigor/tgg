#!/usr/bin/env python3
"""
–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –î–õ–Ø REPLIT –ë–û–¢–ê
"""

import os
import requests
import time
import json
from datetime import datetime

def create_ultimate_monitor():
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    
    monitor_code = '''#!/usr/bin/env python3
"""
–£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–† –î–õ–Ø REPLIT –ë–û–¢–ê
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7
"""

import requests
import time
import json
import threading
import os
from datetime import datetime

class UltimateMonitor:
    def __init__(self, repl_url):
        self.repl_url = repl_url
        self.stats = {
            'total_pings': 0,
            'successful_pings': 0,
            'failed_pings': 0,
            'start_time': datetime.now(),
            'last_success': None,
            'last_failure': None,
            'uptime_checks': 0,
            'health_checks': 0
        }
        self.running = True
        
    def ping_bot(self):
        """–ü–∏–Ω–≥ –±–æ—Ç–∞"""
        try:
            response = requests.get(f"{self.repl_url}/ping", timeout=5)
            self.stats['total_pings'] += 1
            
            if response.status_code == 200:
                self.stats['successful_pings'] += 1
                self.stats['last_success'] = datetime.now()
                return True, "OK"
            else:
                self.stats['failed_pings'] += 1
                self.stats['last_failure'] = datetime.now()
                return False, f"HTTP {response.status_code}"
                
        except Exception as e:
            self.stats['total_pings'] += 1
            self.stats['failed_pings'] += 1
            self.stats['last_failure'] = datetime.now()
            return False, str(e)
    
    def check_all_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = {
            'home': f"{self.repl_url}/",
            'ping': f"{self.repl_url}/ping",
            'health': f"{self.repl_url}/health",
            'stats': f"{self.repl_url}/stats"
        }
        
        results = {}
        for name, url in endpoints.items():
            try:
                response = requests.get(url, timeout=5)
                results[name] = {
                    'status': response.status_code,
                    'success': response.status_code == 200,
                    'response_time': response.elapsed.total_seconds()
                }
            except Exception as e:
                results[name] = {
                    'status': 'error',
                    'success': False,
                    'error': str(e)
                }
        
        return results
    
    def save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            stats_data = {
                'timestamp': datetime.now().isoformat(),
                'stats': self.stats,
                'repl_url': self.repl_url
            }
            
            with open('monitor_stats.json', 'w', encoding='utf-8') as f:
                json.dump(stats_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def display_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        uptime = datetime.now() - self.stats['start_time']
        success_rate = (self.stats['successful_pings'] / self.stats['total_pings'] * 100) if self.stats['total_pings'] > 0 else 0
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        os.system('cls' if os.name == 'nt' else 'clear')
        
        print("üöÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–† REPLIT –ë–û–¢–ê")
        print("=" * 60)
        print(f"üåê URL: {self.repl_url}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}")
        print("=" * 60)
        
        print(f"üì° –í—Å–µ–≥–æ –ø–∏–Ω–≥–æ–≤: {self.stats['total_pings']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.stats['successful_pings']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.stats['failed_pings']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print("=" * 60)
        
        if self.stats['last_success']:
            print(f"üü¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {self.stats['last_success'].strftime('%H:%M:%S')}")
        if self.stats['last_failure']:
            print(f"üî¥ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {self.stats['last_failure'].strftime('%H:%M:%S')}")
        
        print("=" * 60)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥...")
    
    def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                # –ü–∏–Ω–≥ –±–æ—Ç–∞
                success, message = self.ping_bot()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 5 –ø–∏–Ω–≥–æ–≤
                if self.stats['total_pings'] % 5 == 0:
                    endpoints = self.check_all_endpoints()
                    self.stats['health_checks'] += 1
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 –ø–∏–Ω–≥–æ–≤
                if self.stats['total_pings'] % 10 == 0:
                    self.save_stats()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
                self.display_dashboard()
                
                time.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥
                
            except KeyboardInterrupt:
                print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
                self.running = False
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(60)
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        self.monitor_loop()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.display_dashboard()
        print("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    print("üöÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–† –î–õ–Ø REPLIT –ë–û–¢–ê")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º URL
    repl_url = input("üåê –í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ Replit –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    
    if not repl_url.startswith('http'):
        repl_url = f"https://{repl_url}"
    if not repl_url.endswith('.repl.co'):
        repl_url = f"{repl_url}.repl.co"
    
    print(f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è: {repl_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = UltimateMonitor(repl_url)
    monitor.start()

if __name__ == "__main__":
    main()
'''
    
    with open('ultimate_monitor.py', 'w', encoding='utf-8') as f:
        f.write(monitor_code)
    
    print("‚úÖ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: ultimate_monitor.py")

def create_auto_setup_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    setup_code = '''#!/usr/bin/env python3
"""
–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –í–°–ï–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
"""

import os
import subprocess
import sys

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "requests"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def create_batch_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ batch —Ñ–∞–π–ª–æ–≤ –¥–ª—è Windows"""
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
    monitor_bat = '''@echo off
title Replit Bot Monitor
echo Starting Replit Bot Monitor...
python ultimate_monitor.py
pause
'''
    
    with open('start_monitor.bat', 'w', encoding='utf-8') as f:
        f.write(monitor_bat)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
    auto_bat = '''@echo off
title Auto Replit Bot Monitor
echo Starting Auto Monitor...
echo.

:loop
echo Starting monitor at %date% %time%
python ultimate_monitor.py
echo.
echo Waiting 60 seconds before restart...
timeout /t 60 /nobreak > nul
goto loop
'''
    
    with open('auto_monitor.bat', 'w', encoding='utf-8') as f:
        f.write(auto_bat)
    
    print("‚úÖ Batch —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("  - start_monitor.bat (–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞)")
    print("  - auto_monitor.bat (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)")

def create_powershell_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
    monitor_ps = '''# PowerShell monitor for Replit bot
$Host.UI.RawUI.WindowTitle = "Replit Bot Monitor"

Write-Host "Starting Replit Bot Monitor..." -ForegroundColor Green
python ultimate_monitor.py

Write-Host "\\nPress any key to exit..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
'''
    
    with open('start_monitor.ps1', 'w', encoding='utf-8') as f:
        f.write(monitor_ps)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä
    auto_ps = '''# Auto PowerShell monitor
$Host.UI.RawUI.WindowTitle = "Auto Replit Bot Monitor"

Write-Host "Starting Auto Monitor..." -ForegroundColor Green

while ($true) {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "Starting monitor at $timestamp" -ForegroundColor Yellow
    
    python ultimate_monitor.py
    
    Write-Host "Waiting 60 seconds before restart..." -ForegroundColor Cyan
    Start-Sleep -Seconds 60
}
'''
    
    with open('auto_monitor.ps1', 'w', encoding='utf-8') as f:
        f.write(auto_ps)
    
    print("‚úÖ PowerShell —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("  - start_monitor.ps1 (–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞)")
    print("  - auto_monitor.ps1 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)")

def create_linux_scripts():
    """–°–æ–∑–¥–∞–Ω–∏–µ Linux —Å–∫—Ä–∏–ø—Ç–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
    monitor_sh = '''#!/bin/bash
# Linux monitor for Replit bot

echo "Starting Replit Bot Monitor..."
python3 ultimate_monitor.py

echo "\\nPress Enter to exit..."
read
'''
    
    with open('start_monitor.sh', 'w', encoding='utf-8') as f:
        f.write(monitor_sh)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä
    auto_sh = '''#!/bin/bash
# Auto Linux monitor

echo "Starting Auto Monitor..."

while true; do
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "Starting monitor at $timestamp"
    
    python3 ultimate_monitor.py
    
    echo "Waiting 60 seconds before restart..."
    sleep 60
done
'''
    
    with open('auto_monitor.sh', 'w', encoding='utf-8') as f:
        f.write(auto_sh)
    
    # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    try:
        os.chmod('start_monitor.sh', 0o755)
        os.chmod('auto_monitor.sh', 0o755)
    except:
        pass
    
    print("‚úÖ Linux —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("  - start_monitor.sh (–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞)")
    print("  - auto_monitor.sh (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)")

def main():
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –í–°–ï–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 60)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_requirements():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
    create_ultimate_monitor()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    create_batch_files()
    create_powershell_scripts()
    create_linux_scripts()
    
    print("\\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ultimate_monitor.py")
    print("2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:")
    print("   - Windows: start_monitor.bat")
    print("   - PowerShell: start_monitor.ps1")
    print("   - Linux/Mac: ./start_monitor.sh")
    print("3. –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ auto_* —Å–∫—Ä–∏–ø—Ç—ã")
    print("4. –í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω! üõ°Ô∏è")

if __name__ == "__main__":
    main()
'''
    
    with open('auto_setup.py', 'w', encoding='utf-8') as f:
        f.write(setup_code)
    
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫ —Å–æ–∑–¥–∞–Ω: auto_setup.py")

def main():
    print("üöÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    print("=" * 60)
    
    create_ultimate_monitor()
    create_auto_setup_script()
    
    print("\\nüéâ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("üìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auto_setup.py")
    print("2. –ò–ª–∏ —Å—Ä–∞–∑—É: python ultimate_monitor.py")
    print("3. –í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å –Ω–µ—É–±–∏–≤–∞–µ–º—ã–π! üõ°Ô∏è‚ö°")

if __name__ == "__main__":
    main()
